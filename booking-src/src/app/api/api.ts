// tslint:disable
/**
 * Func Api Title
 * Func Api Definition
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: func@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessAssumptionReq
 */
export interface AccessAssumptionReq {
    /**
     * 
     * @type {Array<string>}
     * @memberof AccessAssumptionReq
     */
    assetsIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface AccessAssumptionRes
 */
export interface AccessAssumptionRes {
    /**
     * 
     * @type {Array<string>}
     * @memberof AccessAssumptionRes
     */
    assetsIds: Array<string>;
}
/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    capacity: number;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Asset
     */
    imageUrls: Array<string>;
    /**
     * 
     * @type {Location}
     * @memberof Asset
     */
    location: Location;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    paymentPlanId: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    type: string;
}
/**
 * 
 * @export
 * @interface AssetAssumptionReq
 */
export interface AssetAssumptionReq {
    /**
     * 
     * @type {Array<string>}
     * @memberof AssetAssumptionReq
     */
    assetsIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface AssetAssumptionRes
 */
export interface AssetAssumptionRes {
    /**
     * 
     * @type {Array<string>}
     * @memberof AssetAssumptionRes
     */
    assetsIds: Array<string>;
}
/**
 * 
 * @export
 * @interface AssetListRequest
 */
export interface AssetListRequest {
    /**
     * 
     * @type {string}
     * @memberof AssetListRequest
     */
    capacityFilter?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetListRequest
     */
    locationPubId?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetListRequest
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface BookedAsset
 */
export interface BookedAsset {
    /**
     * 
     * @type {Asset}
     * @memberof BookedAsset
     */
    asset: Asset;
    /**
     * 
     * @type {string}
     * @memberof BookedAsset
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof BookedAsset
     */
    end: string;
    /**
     * 
     * @type {string}
     * @memberof BookedAsset
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof BookedAsset
     */
    start: string;
}
/**
 * 
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     * 
     * @type {Asset}
     * @memberof Booking
     */
    asset: Asset;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    end: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    start: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    status: string;
    /**
     * 
     * @type {UserDataRes}
     * @memberof Booking
     */
    userData: UserDataRes;
}
/**
 * 
 * @export
 * @interface BookingRequest
 */
export interface BookingRequest {
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    assetId: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    end: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    start: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    uid?: string;
    /**
     * 
     * @type {UserDataReq}
     * @memberof BookingRequest
     */
    userData?: UserDataReq;
}
/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    created: string;
    /**
     * 
     * @type {UserLite}
     * @memberof Company
     */
    createdBy: UserLite;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    details: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    updated: string;
    /**
     * 
     * @type {UserLite}
     * @memberof Company
     */
    updatedBy: UserLite;
}
/**
 * 
 * @export
 * @interface CreateAssetRequest
 */
export interface CreateAssetRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateAssetRequest
     */
    capacity?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequest
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateAssetRequest
     */
    imageUrls?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequest
     */
    locationPubId: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequest
     */
    paymentPlanId: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequest
     */
    type: string;
}
/**
 * 
 * @export
 * @interface CreateCompanyRequest
 */
export interface CreateCompanyRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyRequest
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyRequest
     */
    details?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyRequest
     */
    name: string;
}
/**
 * 
 * @export
 * @interface CreateLocationRequest
 */
export interface CreateLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateLocationRequest
     */
    name: string;
}
/**
 * 
 * @export
 * @interface CreatePaymentPlanRequest
 */
export interface CreatePaymentPlanRequest {
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentPlanRequest
     */
    assetPubId?: string;
    /**
     * 
     * @type {PaymentPlanAssumptionReq}
     * @memberof CreatePaymentPlanRequest
     */
    assumption?: PaymentPlanAssumptionReq;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentPlanRequest
     */
    companyPubId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentPlanRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentPlanRequest
     */
    locationPubId: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentPlanRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentPlanRequest
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentPlanRequest
     */
    unit: string;
}
/**
 * 
 * @export
 * @interface CreatePaymentRequest
 */
export interface CreatePaymentRequest {
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    companyId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    details?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    end: string;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentRequest
     */
    length: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    paymentPlanId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    start: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    total: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    unit: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentRequest
     */
    userId?: string;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    companyId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    docsUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    paymentPlanId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    thirdName?: string;
}
/**
 * 
 * @export
 * @interface DeleteAssetRequest
 */
export interface DeleteAssetRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteAssetRequest
     */
    pubId: string;
}
/**
 * 
 * @export
 * @interface DeleteCompanyRequest
 */
export interface DeleteCompanyRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteCompanyRequest
     */
    pubId: string;
}
/**
 * 
 * @export
 * @interface DeleteLocationRequest
 */
export interface DeleteLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteLocationRequest
     */
    pubId: string;
}
/**
 * 
 * @export
 * @interface DeletePaymentPlanRequest
 */
export interface DeletePaymentPlanRequest {
    /**
     * 
     * @type {string}
     * @memberof DeletePaymentPlanRequest
     */
    pubId: string;
}
/**
 * 
 * @export
 * @interface DeletePaymentRequest
 */
export interface DeletePaymentRequest {
    /**
     * 
     * @type {string}
     * @memberof DeletePaymentRequest
     */
    pubId: string;
}
/**
 * 
 * @export
 * @interface DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteUserRequest
     */
    pubId: string;
}
/**
 * 
 * @export
 * @interface FindBookedAssetsRequest
 */
export interface FindBookedAssetsRequest {
    /**
     * 
     * @type {string}
     * @memberof FindBookedAssetsRequest
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof FindBookedAssetsRequest
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof FindBookedAssetsRequest
     */
    withoutBookingId?: string;
}
/**
 * 
 * @export
 * @interface ListRequest
 */
export interface ListRequest {
    /**
     * 
     * @type {string}
     * @memberof ListRequest
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof ListRequest
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof ListRequest
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof ListRequest
     */
    locationId?: string;
    /**
     * 
     * @type {string}
     * @memberof ListRequest
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof ListRequest
     */
    to?: string;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    created: string;
    /**
     * 
     * @type {UserLite}
     * @memberof Location
     */
    createdBy: UserLite;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    updated: string;
    /**
     * 
     * @type {UserLite}
     * @memberof Location
     */
    updatedBy: UserLite;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    mobile?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    accessToken: string;
}
/**
 * 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    assetName?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    companyId?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    companyName?: string;
    /**
     * 
     * @type {UserLite}
     * @memberof Payment
     */
    createdBy: UserLite;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    createdDate: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    details: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    end: string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    length: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    paymentPlanId?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    paymentPlanName?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    start: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    total: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    unit: string;
    /**
     * 
     * @type {UserLite}
     * @memberof Payment
     */
    updatedBy: UserLite;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    updatedDate: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    userName?: string;
}
/**
 * 
 * @export
 * @interface PaymentListRequest
 */
export interface PaymentListRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentListRequest
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentListRequest
     */
    companyId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentListRequest
     */
    filter?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentListRequest
     */
    limit?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentListRequest
     */
    locationPubId?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentListRequest
     */
    offset?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentListRequest
     */
    userId?: string;
}
/**
 * 
 * @export
 * @interface PaymentListResponse
 */
export interface PaymentListResponse {
    /**
     * 
     * @type {number}
     * @memberof PaymentListResponse
     */
    limit: number;
    /**
     * 
     * @type {Array<Payment>}
     * @memberof PaymentListResponse
     */
    list: Array<Payment>;
    /**
     * 
     * @type {number}
     * @memberof PaymentListResponse
     */
    offset: number;
    /**
     * 
     * @type {number}
     * @memberof PaymentListResponse
     */
    total: number;
}
/**
 * 
 * @export
 * @interface PaymentPlan
 */
export interface PaymentPlan {
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    assetPubId?: string;
    /**
     * 
     * @type {PaymentPlanAssumptionRes}
     * @memberof PaymentPlan
     */
    assumption?: PaymentPlanAssumptionRes;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    companyPubId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    created: string;
    /**
     * 
     * @type {UserLite}
     * @memberof PaymentPlan
     */
    createdBy: UserLite;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    locationPubId: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    unit: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlan
     */
    updated: string;
    /**
     * 
     * @type {UserLite}
     * @memberof PaymentPlan
     */
    updatedBy: UserLite;
}
/**
 * 
 * @export
 * @interface PaymentPlanAssumptionReq
 */
export interface PaymentPlanAssumptionReq {
    /**
     * 
     * @type {AccessAssumptionReq}
     * @memberof PaymentPlanAssumptionReq
     */
    access?: AccessAssumptionReq;
    /**
     * 
     * @type {AssetAssumptionReq}
     * @memberof PaymentPlanAssumptionReq
     */
    asset?: AssetAssumptionReq;
    /**
     * 
     * @type {Array<WorkTimeRangeReq>}
     * @memberof PaymentPlanAssumptionReq
     */
    workTimeRanges?: Array<WorkTimeRangeReq>;
}
/**
 * 
 * @export
 * @interface PaymentPlanAssumptionRes
 */
export interface PaymentPlanAssumptionRes {
    /**
     * 
     * @type {AccessAssumptionRes}
     * @memberof PaymentPlanAssumptionRes
     */
    access?: AccessAssumptionRes;
    /**
     * 
     * @type {AssetAssumptionRes}
     * @memberof PaymentPlanAssumptionRes
     */
    asset?: AssetAssumptionRes;
    /**
     * 
     * @type {Array<WorkTimeRangeRes>}
     * @memberof PaymentPlanAssumptionRes
     */
    workTimeRanges: Array<WorkTimeRangeRes>;
}
/**
 * 
 * @export
 * @interface PaymentPlanListRequest
 */
export interface PaymentPlanListRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentPlanListRequest
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlanListRequest
     */
    companyId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlanListRequest
     */
    exceptPaymentPlanId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlanListRequest
     */
    locationPubId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPlanListRequest
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    mobile?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface UpdateAssetRequest
 */
export interface UpdateAssetRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateAssetRequest
     */
    capacity?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateAssetRequest
     */
    imageUrls?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    locationPubId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    paymentPlanId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    type: string;
}
/**
 * 
 * @export
 * @interface UpdateCompanyRequest
 */
export interface UpdateCompanyRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyRequest
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyRequest
     */
    details?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyRequest
     */
    pubId: string;
}
/**
 * 
 * @export
 * @interface UpdateLocationRequest
 */
export interface UpdateLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateLocationRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateLocationRequest
     */
    pubId: string;
}
/**
 * 
 * @export
 * @interface UpdatePaymentPlanRequest
 */
export interface UpdatePaymentPlanRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentPlanRequest
     */
    assetPubId?: string;
    /**
     * 
     * @type {PaymentPlanAssumptionReq}
     * @memberof UpdatePaymentPlanRequest
     */
    assumption?: PaymentPlanAssumptionReq;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentPlanRequest
     */
    companyPubId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentPlanRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentPlanRequest
     */
    locationPubId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentPlanRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentPlanRequest
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentPlanRequest
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentPlanRequest
     */
    unit: string;
}
/**
 * 
 * @export
 * @interface UpdatePaymentRequest
 */
export interface UpdatePaymentRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    companyId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    details?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    end: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentRequest
     */
    length: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    paymentPlanId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    start: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    total: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    unit: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentRequest
     */
    userId?: string;
}
/**
 * 
 * @export
 * @interface UpdateRequest
 */
export interface UpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    assetId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    bookingId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    end: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    start: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    uid?: string;
    /**
     * 
     * @type {UserDataReq}
     * @memberof UpdateRequest
     */
    userData?: UserDataReq;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    companyId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    docsUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    paymentPlanId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    thirdName?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    companyId: string;
    /**
     * 
     * @type {UserLite}
     * @memberof User
     */
    createdBy: UserLite;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    createdDate: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    docsUrl: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    mobile: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    paymentPlanId: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    thirdName: string;
    /**
     * 
     * @type {UserLite}
     * @memberof User
     */
    updatedBy: UserLite;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    updatedDate: string;
}
/**
 * 
 * @export
 * @interface UserDataReq
 */
export interface UserDataReq {
    /**
     * 
     * @type {string}
     * @memberof UserDataReq
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserDataReq
     */
    phone: string;
}
/**
 * 
 * @export
 * @interface UserDataRes
 */
export interface UserDataRes {
    /**
     * 
     * @type {string}
     * @memberof UserDataRes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserDataRes
     */
    phone: string;
}
/**
 * 
 * @export
 * @interface UserListRequest
 */
export interface UserListRequest {
    /**
     * 
     * @type {string}
     * @memberof UserListRequest
     */
    companyId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserListRequest
     */
    locationPubId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserListRequest
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface UserLite
 */
export interface UserLite {
    /**
     * 
     * @type {string}
     * @memberof UserLite
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserLite
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserLite
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof UserLite
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof UserLite
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof UserLite
     */
    thirdName: string;
}
/**
 * 
 * @export
 * @interface UserWithCurrentAccess
 */
export interface UserWithCurrentAccess {
    /**
     * 
     * @type {string}
     * @memberof UserWithCurrentAccess
     */
    currentAccessAsset: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithCurrentAccess
     */
    currentAccessFrom?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithCurrentAccess
     */
    currentAccessTo?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithCurrentAccess
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithCurrentAccess
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithCurrentAccess
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithCurrentAccess
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithCurrentAccess
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithCurrentAccess
     */
    thirdName: string;
}
/**
 * 
 * @export
 * @interface WorkTimeRangeReq
 */
export interface WorkTimeRangeReq {
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeReq
     */
    end: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkTimeRangeReq
     */
    isWeekend?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeReq
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeReq
     */
    start: string;
}
/**
 * 
 * @export
 * @interface WorkTimeRangeRes
 */
export interface WorkTimeRangeRes {
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeRes
     */
    end: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkTimeRangeRes
     */
    isWeekend: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeRes
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeRes
     */
    start: string;
}

/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary list of assets
         * @param {AssetListRequest} assetListRequest assetListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetsListUsingPOST: async (assetListRequest: AssetListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetListRequest' is not null or undefined
            if (assetListRequest === null || assetListRequest === undefined) {
                throw new RequiredError('assetListRequest','Required parameter assetListRequest was null or undefined when calling assetsListUsingPOST.');
            }
            const localVarPath = `/api/assets/assetsList`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof assetListRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(assetListRequest !== undefined ? assetListRequest : {}) : (assetListRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create asset
         * @param {CreateAssetRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST: async (createRequest: CreateAssetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequest' is not null or undefined
            if (createRequest === null || createRequest === undefined) {
                throw new RequiredError('createRequest','Required parameter createRequest was null or undefined when calling createUsingPOST.');
            }
            const localVarPath = `/api/assets/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRequest !== undefined ? createRequest : {}) : (createRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteAssetRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingPOST: async (deleteRequest: DeleteAssetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            if (deleteRequest === null || deleteRequest === undefined) {
                throw new RequiredError('deleteRequest','Required parameter deleteRequest was null or undefined when calling deleteUsingPOST.');
            }
            const localVarPath = `/api/assets/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deleteRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteRequest !== undefined ? deleteRequest : {}) : (deleteRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling getUsingGET.');
            }
            const localVarPath = `/api/assets/get/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assets/test`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update asset
         * @param {UpdateAssetRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPOST: async (updateRequest: UpdateAssetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            if (updateRequest === null || updateRequest === undefined) {
                throw new RequiredError('updateRequest','Required parameter updateRequest was null or undefined when calling updateUsingPOST.');
            }
            const localVarPath = `/api/assets/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRequest !== undefined ? updateRequest : {}) : (updateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary list of assets
         * @param {AssetListRequest} assetListRequest assetListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetsListUsingPOST(assetListRequest: AssetListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Asset>>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).assetsListUsingPOST(assetListRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create asset
         * @param {CreateAssetRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUsingPOST(createRequest: CreateAssetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).createUsingPOST(createRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteAssetRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingPOST(deleteRequest: DeleteAssetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).deleteUsingPOST(deleteRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsingGET(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).getUsingGET(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).testUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update asset
         * @param {UpdateAssetRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPOST(updateRequest: UpdateAssetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).updateUsingPOST(updateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary list of assets
         * @param {AssetListRequest} assetListRequest assetListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetsListUsingPOST(assetListRequest: AssetListRequest, options?: any): AxiosPromise<Array<Asset>> {
            return AssetsApiFp(configuration).assetsListUsingPOST(assetListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create asset
         * @param {CreateAssetRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(createRequest: CreateAssetRequest, options?: any): AxiosPromise<Asset> {
            return AssetsApiFp(configuration).createUsingPOST(createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteAssetRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingPOST(deleteRequest: DeleteAssetRequest, options?: any): AxiosPromise<void> {
            return AssetsApiFp(configuration).deleteUsingPOST(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET(pubId: string, options?: any): AxiosPromise<Asset> {
            return AssetsApiFp(configuration).getUsingGET(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testUsingGET(options?: any): AxiosPromise<string> {
            return AssetsApiFp(configuration).testUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update asset
         * @param {UpdateAssetRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPOST(updateRequest: UpdateAssetRequest, options?: any): AxiosPromise<Asset> {
            return AssetsApiFp(configuration).updateUsingPOST(updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI {
    /**
     * 
     * @summary list of assets
     * @param {AssetListRequest} assetListRequest assetListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public assetsListUsingPOST(assetListRequest: AssetListRequest, options?: any) {
        return AssetsApiFp(this.configuration).assetsListUsingPOST(assetListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create asset
     * @param {CreateAssetRequest} createRequest createRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public createUsingPOST(createRequest: CreateAssetRequest, options?: any) {
        return AssetsApiFp(this.configuration).createUsingPOST(createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete asset
     * @param {DeleteAssetRequest} deleteRequest deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public deleteUsingPOST(deleteRequest: DeleteAssetRequest, options?: any) {
        return AssetsApiFp(this.configuration).deleteUsingPOST(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get asset
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public getUsingGET(pubId: string, options?: any) {
        return AssetsApiFp(this.configuration).getUsingGET(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public testUsingGET(options?: any) {
        return AssetsApiFp(this.configuration).testUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update asset
     * @param {UpdateAssetRequest} updateRequest updateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public updateUsingPOST(updateRequest: UpdateAssetRequest, options?: any) {
        return AssetsApiFp(this.configuration).updateUsingPOST(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AuthAPIApi - axios parameter creator
 * @export
 */
export const AuthAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login with mobile and password
         * @param {LoginRequest} loginRequest loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST: async (loginRequest: LoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            if (loginRequest === null || loginRequest === undefined) {
                throw new RequiredError('loginRequest','Required parameter loginRequest was null or undefined when calling loginUsingPOST.');
            }
            const localVarPath = `/api/auth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register user
         * @param {RegisterRequest} registerRequest registerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST: async (registerRequest: RegisterRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            if (registerRequest === null || registerRequest === undefined) {
                throw new RequiredError('registerRequest','Required parameter registerRequest was null or undefined when calling registerUsingPOST.');
            }
            const localVarPath = `/api/auth/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof registerRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registerRequest !== undefined ? registerRequest : {}) : (registerRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthAPIApi - functional programming interface
 * @export
 */
export const AuthAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLite>> {
            const localVarAxiosArgs = await AuthAPIApiAxiosParamCreator(configuration).getUsingGET1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Login with mobile and password
         * @param {LoginRequest} loginRequest loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsingPOST(loginRequest: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await AuthAPIApiAxiosParamCreator(configuration).loginUsingPOST(loginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register user
         * @param {RegisterRequest} registerRequest registerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUsingPOST(registerRequest: RegisterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthAPIApiAxiosParamCreator(configuration).registerUsingPOST(registerRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthAPIApi - factory interface
 * @export
 */
export const AuthAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary get asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET1(options?: any): AxiosPromise<UserLite> {
            return AuthAPIApiFp(configuration).getUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login with mobile and password
         * @param {LoginRequest} loginRequest loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST(loginRequest: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return AuthAPIApiFp(configuration).loginUsingPOST(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register user
         * @param {RegisterRequest} registerRequest registerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST(registerRequest: RegisterRequest, options?: any): AxiosPromise<void> {
            return AuthAPIApiFp(configuration).registerUsingPOST(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthAPIApi - object-oriented interface
 * @export
 * @class AuthAPIApi
 * @extends {BaseAPI}
 */
export class AuthAPIApi extends BaseAPI {
    /**
     * 
     * @summary get asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public getUsingGET1(options?: any) {
        return AuthAPIApiFp(this.configuration).getUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login with mobile and password
     * @param {LoginRequest} loginRequest loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public loginUsingPOST(loginRequest: LoginRequest, options?: any) {
        return AuthAPIApiFp(this.configuration).loginUsingPOST(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register user
     * @param {RegisterRequest} registerRequest registerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public registerUsingPOST(registerRequest: RegisterRequest, options?: any) {
        return AuthAPIApiFp(this.configuration).registerUsingPOST(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * BookingApi - axios parameter creator
 * @export
 */
export const BookingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveUsingPOST: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling approveUsingPOST.');
            }
            const localVarPath = `/api/booking/approve/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Book an asset
         * @param {BookingRequest} bookingRequest bookingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookUsingPOST: async (bookingRequest: BookingRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingRequest' is not null or undefined
            if (bookingRequest === null || bookingRequest === undefined) {
                throw new RequiredError('bookingRequest','Required parameter bookingRequest was null or undefined when calling bookUsingPOST.');
            }
            const localVarPath = `/api/booking/book`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bookingRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bookingRequest !== undefined ? bookingRequest : {}) : (bookingRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineUsingPOST: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling declineUsingPOST.');
            }
            const localVarPath = `/api/booking/decline/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find booked assets
         * @param {FindBookedAssetsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBookedAssetsUsingPOST: async (request: FindBookedAssetsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling findBookedAssetsUsingPOST.');
            }
            const localVarPath = `/api/booking/booked`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET2: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling getUsingGET2.');
            }
            const localVarPath = `/api/booking/get/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Booking list
         * @param {ListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsingPOST: async (listRequest: ListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'listRequest' is not null or undefined
            if (listRequest === null || listRequest === undefined) {
                throw new RequiredError('listRequest','Required parameter listRequest was null or undefined when calling listUsingPOST.');
            }
            const localVarPath = `/api/booking/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof listRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(listRequest !== undefined ? listRequest : {}) : (listRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an asset
         * @param {UpdateRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPOST1: async (updateRequest: UpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            if (updateRequest === null || updateRequest === undefined) {
                throw new RequiredError('updateRequest','Required parameter updateRequest was null or undefined when calling updateUsingPOST1.');
            }
            const localVarPath = `/api/booking/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRequest !== undefined ? updateRequest : {}) : (updateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingApi - functional programming interface
 * @export
 */
export const BookingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveUsingPOST(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).approveUsingPOST(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Book an asset
         * @param {BookingRequest} bookingRequest bookingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookUsingPOST(bookingRequest: BookingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).bookUsingPOST(bookingRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Decline book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineUsingPOST(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).declineUsingPOST(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Find booked assets
         * @param {FindBookedAssetsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findBookedAssetsUsingPOST(request: FindBookedAssetsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookedAsset>>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).findBookedAssetsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsingGET2(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).getUsingGET2(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Booking list
         * @param {ListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsingPOST(listRequest: ListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Booking>>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).listUsingPOST(listRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update an asset
         * @param {UpdateRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPOST1(updateRequest: UpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).updateUsingPOST1(updateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BookingApi - factory interface
 * @export
 */
export const BookingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Approve book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveUsingPOST(pubId: string, options?: any): AxiosPromise<Booking> {
            return BookingApiFp(configuration).approveUsingPOST(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Book an asset
         * @param {BookingRequest} bookingRequest bookingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookUsingPOST(bookingRequest: BookingRequest, options?: any): AxiosPromise<Booking> {
            return BookingApiFp(configuration).bookUsingPOST(bookingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineUsingPOST(pubId: string, options?: any): AxiosPromise<Booking> {
            return BookingApiFp(configuration).declineUsingPOST(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find booked assets
         * @param {FindBookedAssetsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBookedAssetsUsingPOST(request: FindBookedAssetsRequest, options?: any): AxiosPromise<Array<BookedAsset>> {
            return BookingApiFp(configuration).findBookedAssetsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET2(pubId: string, options?: any): AxiosPromise<Booking> {
            return BookingApiFp(configuration).getUsingGET2(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Booking list
         * @param {ListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsingPOST(listRequest: ListRequest, options?: any): AxiosPromise<Array<Booking>> {
            return BookingApiFp(configuration).listUsingPOST(listRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an asset
         * @param {UpdateRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPOST1(updateRequest: UpdateRequest, options?: any): AxiosPromise<Booking> {
            return BookingApiFp(configuration).updateUsingPOST1(updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookingApi - object-oriented interface
 * @export
 * @class BookingApi
 * @extends {BaseAPI}
 */
export class BookingApi extends BaseAPI {
    /**
     * 
     * @summary Approve book an asset
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public approveUsingPOST(pubId: string, options?: any) {
        return BookingApiFp(this.configuration).approveUsingPOST(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Book an asset
     * @param {BookingRequest} bookingRequest bookingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public bookUsingPOST(bookingRequest: BookingRequest, options?: any) {
        return BookingApiFp(this.configuration).bookUsingPOST(bookingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline book an asset
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public declineUsingPOST(pubId: string, options?: any) {
        return BookingApiFp(this.configuration).declineUsingPOST(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find booked assets
     * @param {FindBookedAssetsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public findBookedAssetsUsingPOST(request: FindBookedAssetsRequest, options?: any) {
        return BookingApiFp(this.configuration).findBookedAssetsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get book an asset
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public getUsingGET2(pubId: string, options?: any) {
        return BookingApiFp(this.configuration).getUsingGET2(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Booking list
     * @param {ListRequest} listRequest listRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public listUsingPOST(listRequest: ListRequest, options?: any) {
        return BookingApiFp(this.configuration).listUsingPOST(listRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an asset
     * @param {UpdateRequest} updateRequest updateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public updateUsingPOST1(updateRequest: UpdateRequest, options?: any) {
        return BookingApiFp(this.configuration).updateUsingPOST1(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CompanyApi - axios parameter creator
 * @export
 */
export const CompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create company
         * @param {CreateCompanyRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyUsingPOST: async (createRequest: CreateCompanyRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequest' is not null or undefined
            if (createRequest === null || createRequest === undefined) {
                throw new RequiredError('createRequest','Required parameter createRequest was null or undefined when calling createCompanyUsingPOST.');
            }
            const localVarPath = `/api/company/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRequest !== undefined ? createRequest : {}) : (createRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteCompanyRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyUsingPOST: async (deleteRequest: DeleteCompanyRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            if (deleteRequest === null || deleteRequest === undefined) {
                throw new RequiredError('deleteRequest','Required parameter deleteRequest was null or undefined when calling deleteCompanyUsingPOST.');
            }
            const localVarPath = `/api/company/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deleteRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteRequest !== undefined ? deleteRequest : {}) : (deleteRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a company
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyListUsingPOST: async (name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/company/list/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a company
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyUsingGET: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling getCompanyUsingGET.');
            }
            const localVarPath = `/api/company/get/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update company
         * @param {UpdateCompanyRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyUsingPOST: async (updateRequest: UpdateCompanyRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            if (updateRequest === null || updateRequest === undefined) {
                throw new RequiredError('updateRequest','Required parameter updateRequest was null or undefined when calling updateCompanyUsingPOST.');
            }
            const localVarPath = `/api/company/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRequest !== undefined ? updateRequest : {}) : (updateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyApi - functional programming interface
 * @export
 */
export const CompanyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create company
         * @param {CreateCompanyRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompanyUsingPOST(createRequest: CreateCompanyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await CompanyApiAxiosParamCreator(configuration).createCompanyUsingPOST(createRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteCompanyRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompanyUsingPOST(deleteRequest: DeleteCompanyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CompanyApiAxiosParamCreator(configuration).deleteCompanyUsingPOST(deleteRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get a company
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyListUsingPOST(name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await CompanyApiAxiosParamCreator(configuration).getCompanyListUsingPOST(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get a company
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyUsingGET(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await CompanyApiAxiosParamCreator(configuration).getCompanyUsingGET(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update company
         * @param {UpdateCompanyRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompanyUsingPOST(updateRequest: UpdateCompanyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await CompanyApiAxiosParamCreator(configuration).updateCompanyUsingPOST(updateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CompanyApi - factory interface
 * @export
 */
export const CompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create company
         * @param {CreateCompanyRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyUsingPOST(createRequest: CreateCompanyRequest, options?: any): AxiosPromise<Company> {
            return CompanyApiFp(configuration).createCompanyUsingPOST(createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteCompanyRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyUsingPOST(deleteRequest: DeleteCompanyRequest, options?: any): AxiosPromise<void> {
            return CompanyApiFp(configuration).deleteCompanyUsingPOST(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a company
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyListUsingPOST(name?: string, options?: any): AxiosPromise<Array<Company>> {
            return CompanyApiFp(configuration).getCompanyListUsingPOST(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a company
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyUsingGET(pubId: string, options?: any): AxiosPromise<Company> {
            return CompanyApiFp(configuration).getCompanyUsingGET(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update company
         * @param {UpdateCompanyRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyUsingPOST(updateRequest: UpdateCompanyRequest, options?: any): AxiosPromise<Company> {
            return CompanyApiFp(configuration).updateCompanyUsingPOST(updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyApi - object-oriented interface
 * @export
 * @class CompanyApi
 * @extends {BaseAPI}
 */
export class CompanyApi extends BaseAPI {
    /**
     * 
     * @summary Create company
     * @param {CreateCompanyRequest} createRequest createRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public createCompanyUsingPOST(createRequest: CreateCompanyRequest, options?: any) {
        return CompanyApiFp(this.configuration).createCompanyUsingPOST(createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete asset
     * @param {DeleteCompanyRequest} deleteRequest deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public deleteCompanyUsingPOST(deleteRequest: DeleteCompanyRequest, options?: any) {
        return CompanyApiFp(this.configuration).deleteCompanyUsingPOST(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a company
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public getCompanyListUsingPOST(name?: string, options?: any) {
        return CompanyApiFp(this.configuration).getCompanyListUsingPOST(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a company
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public getCompanyUsingGET(pubId: string, options?: any) {
        return CompanyApiFp(this.configuration).getCompanyUsingGET(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update company
     * @param {UpdateCompanyRequest} updateRequest updateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public updateCompanyUsingPOST(updateRequest: UpdateCompanyRequest, options?: any) {
        return CompanyApiFp(this.configuration).updateCompanyUsingPOST(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create location
         * @param {CreateLocationRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocationUsingPOST: async (createRequest: CreateLocationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequest' is not null or undefined
            if (createRequest === null || createRequest === undefined) {
                throw new RequiredError('createRequest','Required parameter createRequest was null or undefined when calling createLocationUsingPOST.');
            }
            const localVarPath = `/api/location/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRequest !== undefined ? createRequest : {}) : (createRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteLocationRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocationUsingPOST: async (deleteRequest: DeleteLocationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            if (deleteRequest === null || deleteRequest === undefined) {
                throw new RequiredError('deleteRequest','Required parameter deleteRequest was null or undefined when calling deleteLocationUsingPOST.');
            }
            const localVarPath = `/api/location/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deleteRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteRequest !== undefined ? deleteRequest : {}) : (deleteRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a location
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationListUsingPOST: async (name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/location/list/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a location
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationUsingGET: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling getLocationUsingGET.');
            }
            const localVarPath = `/api/location/get/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update location
         * @param {UpdateLocationRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocationUsingPOST: async (updateRequest: UpdateLocationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            if (updateRequest === null || updateRequest === undefined) {
                throw new RequiredError('updateRequest','Required parameter updateRequest was null or undefined when calling updateLocationUsingPOST.');
            }
            const localVarPath = `/api/location/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRequest !== undefined ? updateRequest : {}) : (updateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create location
         * @param {CreateLocationRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLocationUsingPOST(createRequest: CreateLocationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await LocationApiAxiosParamCreator(configuration).createLocationUsingPOST(createRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteLocationRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLocationUsingPOST(deleteRequest: DeleteLocationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LocationApiAxiosParamCreator(configuration).deleteLocationUsingPOST(deleteRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get a location
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationListUsingPOST(name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>> {
            const localVarAxiosArgs = await LocationApiAxiosParamCreator(configuration).getLocationListUsingPOST(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get a location
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationUsingGET(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await LocationApiAxiosParamCreator(configuration).getLocationUsingGET(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update location
         * @param {UpdateLocationRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocationUsingPOST(updateRequest: UpdateLocationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await LocationApiAxiosParamCreator(configuration).updateLocationUsingPOST(updateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create location
         * @param {CreateLocationRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocationUsingPOST(createRequest: CreateLocationRequest, options?: any): AxiosPromise<Location> {
            return LocationApiFp(configuration).createLocationUsingPOST(createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteLocationRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocationUsingPOST(deleteRequest: DeleteLocationRequest, options?: any): AxiosPromise<void> {
            return LocationApiFp(configuration).deleteLocationUsingPOST(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a location
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationListUsingPOST(name?: string, options?: any): AxiosPromise<Array<Location>> {
            return LocationApiFp(configuration).getLocationListUsingPOST(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a location
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationUsingGET(pubId: string, options?: any): AxiosPromise<Location> {
            return LocationApiFp(configuration).getLocationUsingGET(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update location
         * @param {UpdateLocationRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocationUsingPOST(updateRequest: UpdateLocationRequest, options?: any): AxiosPromise<Location> {
            return LocationApiFp(configuration).updateLocationUsingPOST(updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
    /**
     * 
     * @summary Create location
     * @param {CreateLocationRequest} createRequest createRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public createLocationUsingPOST(createRequest: CreateLocationRequest, options?: any) {
        return LocationApiFp(this.configuration).createLocationUsingPOST(createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete asset
     * @param {DeleteLocationRequest} deleteRequest deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public deleteLocationUsingPOST(deleteRequest: DeleteLocationRequest, options?: any) {
        return LocationApiFp(this.configuration).deleteLocationUsingPOST(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a location
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public getLocationListUsingPOST(name?: string, options?: any) {
        return LocationApiFp(this.configuration).getLocationListUsingPOST(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a location
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public getLocationUsingGET(pubId: string, options?: any) {
        return LocationApiFp(this.configuration).getLocationUsingGET(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update location
     * @param {UpdateLocationRequest} updateRequest updateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public updateLocationUsingPOST(updateRequest: UpdateLocationRequest, options?: any) {
        return LocationApiFp(this.configuration).updateLocationUsingPOST(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a payment
         * @param {CreatePaymentRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentUsingPOST: async (createRequest: CreatePaymentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequest' is not null or undefined
            if (createRequest === null || createRequest === undefined) {
                throw new RequiredError('createRequest','Required parameter createRequest was null or undefined when calling createPaymentUsingPOST.');
            }
            const localVarPath = `/api/payment/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRequest !== undefined ? createRequest : {}) : (createRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete the payment
         * @param {DeletePaymentRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentUsingPOST: async (deleteRequest: DeletePaymentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            if (deleteRequest === null || deleteRequest === undefined) {
                throw new RequiredError('deleteRequest','Required parameter deleteRequest was null or undefined when calling deletePaymentUsingPOST.');
            }
            const localVarPath = `/api/payment/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deleteRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteRequest !== undefined ? deleteRequest : {}) : (deleteRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get payment list
         * @param {PaymentListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentListUsingPOST: async (listRequest: PaymentListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'listRequest' is not null or undefined
            if (listRequest === null || listRequest === undefined) {
                throw new RequiredError('listRequest','Required parameter listRequest was null or undefined when calling getPaymentListUsingPOST.');
            }
            const localVarPath = `/api/payment/list/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof listRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(listRequest !== undefined ? listRequest : {}) : (listRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get the payment plan
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentUsingGET: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling getPaymentUsingGET.');
            }
            const localVarPath = `/api/payment/get/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the payment
         * @param {UpdatePaymentRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentUsingPOST: async (updateRequest: UpdatePaymentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            if (updateRequest === null || updateRequest === undefined) {
                throw new RequiredError('updateRequest','Required parameter updateRequest was null or undefined when calling updatePaymentUsingPOST.');
            }
            const localVarPath = `/api/payment/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRequest !== undefined ? updateRequest : {}) : (updateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a payment
         * @param {CreatePaymentRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentUsingPOST(createRequest: CreatePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await PaymentApiAxiosParamCreator(configuration).createPaymentUsingPOST(createRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete the payment
         * @param {DeletePaymentRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePaymentUsingPOST(deleteRequest: DeletePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PaymentApiAxiosParamCreator(configuration).deletePaymentUsingPOST(deleteRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get payment list
         * @param {PaymentListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentListUsingPOST(listRequest: PaymentListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentListResponse>> {
            const localVarAxiosArgs = await PaymentApiAxiosParamCreator(configuration).getPaymentListUsingPOST(listRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get the payment plan
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentUsingGET(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await PaymentApiAxiosParamCreator(configuration).getPaymentUsingGET(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update the payment
         * @param {UpdatePaymentRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentUsingPOST(updateRequest: UpdatePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await PaymentApiAxiosParamCreator(configuration).updatePaymentUsingPOST(updateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a payment
         * @param {CreatePaymentRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentUsingPOST(createRequest: CreatePaymentRequest, options?: any): AxiosPromise<Payment> {
            return PaymentApiFp(configuration).createPaymentUsingPOST(createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete the payment
         * @param {DeletePaymentRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentUsingPOST(deleteRequest: DeletePaymentRequest, options?: any): AxiosPromise<void> {
            return PaymentApiFp(configuration).deletePaymentUsingPOST(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get payment list
         * @param {PaymentListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentListUsingPOST(listRequest: PaymentListRequest, options?: any): AxiosPromise<PaymentListResponse> {
            return PaymentApiFp(configuration).getPaymentListUsingPOST(listRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get the payment plan
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentUsingGET(pubId: string, options?: any): AxiosPromise<Payment> {
            return PaymentApiFp(configuration).getPaymentUsingGET(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the payment
         * @param {UpdatePaymentRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentUsingPOST(updateRequest: UpdatePaymentRequest, options?: any): AxiosPromise<Payment> {
            return PaymentApiFp(configuration).updatePaymentUsingPOST(updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @summary Create a payment
     * @param {CreatePaymentRequest} createRequest createRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public createPaymentUsingPOST(createRequest: CreatePaymentRequest, options?: any) {
        return PaymentApiFp(this.configuration).createPaymentUsingPOST(createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete the payment
     * @param {DeletePaymentRequest} deleteRequest deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public deletePaymentUsingPOST(deleteRequest: DeletePaymentRequest, options?: any) {
        return PaymentApiFp(this.configuration).deletePaymentUsingPOST(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get payment list
     * @param {PaymentListRequest} listRequest listRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public getPaymentListUsingPOST(listRequest: PaymentListRequest, options?: any) {
        return PaymentApiFp(this.configuration).getPaymentListUsingPOST(listRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get the payment plan
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public getPaymentUsingGET(pubId: string, options?: any) {
        return PaymentApiFp(this.configuration).getPaymentUsingGET(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the payment
     * @param {UpdatePaymentRequest} updateRequest updateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public updatePaymentUsingPOST(updateRequest: UpdatePaymentRequest, options?: any) {
        return PaymentApiFp(this.configuration).updatePaymentUsingPOST(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * PaymentPlanApi - axios parameter creator
 * @export
 */
export const PaymentPlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create payment plan
         * @param {CreatePaymentPlanRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentPlanUsingPOST: async (createRequest: CreatePaymentPlanRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequest' is not null or undefined
            if (createRequest === null || createRequest === undefined) {
                throw new RequiredError('createRequest','Required parameter createRequest was null or undefined when calling createPaymentPlanUsingPOST.');
            }
            const localVarPath = `/api/paymentplan/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRequest !== undefined ? createRequest : {}) : (createRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete the payment plan
         * @param {DeletePaymentPlanRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentPlanUsingPOST: async (deleteRequest: DeletePaymentPlanRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            if (deleteRequest === null || deleteRequest === undefined) {
                throw new RequiredError('deleteRequest','Required parameter deleteRequest was null or undefined when calling deletePaymentPlanUsingPOST.');
            }
            const localVarPath = `/api/paymentplan/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deleteRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteRequest !== undefined ? deleteRequest : {}) : (deleteRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a payment plan
         * @param {PaymentPlanListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPlanListUsingPOST: async (listRequest: PaymentPlanListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'listRequest' is not null or undefined
            if (listRequest === null || listRequest === undefined) {
                throw new RequiredError('listRequest','Required parameter listRequest was null or undefined when calling getPaymentPlanListUsingPOST.');
            }
            const localVarPath = `/api/paymentplan/list/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof listRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(listRequest !== undefined ? listRequest : {}) : (listRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get the payment plan
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPlanUsingGET: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling getPaymentPlanUsingGET.');
            }
            const localVarPath = `/api/paymentplan/get/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update payment plan
         * @param {UpdatePaymentPlanRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentPlanUsingPOST: async (updateRequest: UpdatePaymentPlanRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            if (updateRequest === null || updateRequest === undefined) {
                throw new RequiredError('updateRequest','Required parameter updateRequest was null or undefined when calling updatePaymentPlanUsingPOST.');
            }
            const localVarPath = `/api/paymentplan/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRequest !== undefined ? updateRequest : {}) : (updateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentPlanApi - functional programming interface
 * @export
 */
export const PaymentPlanApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create payment plan
         * @param {CreatePaymentPlanRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentPlanUsingPOST(createRequest: CreatePaymentPlanRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPlan>> {
            const localVarAxiosArgs = await PaymentPlanApiAxiosParamCreator(configuration).createPaymentPlanUsingPOST(createRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete the payment plan
         * @param {DeletePaymentPlanRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePaymentPlanUsingPOST(deleteRequest: DeletePaymentPlanRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PaymentPlanApiAxiosParamCreator(configuration).deletePaymentPlanUsingPOST(deleteRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get a payment plan
         * @param {PaymentPlanListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentPlanListUsingPOST(listRequest: PaymentPlanListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentPlan>>> {
            const localVarAxiosArgs = await PaymentPlanApiAxiosParamCreator(configuration).getPaymentPlanListUsingPOST(listRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get the payment plan
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentPlanUsingGET(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPlan>> {
            const localVarAxiosArgs = await PaymentPlanApiAxiosParamCreator(configuration).getPaymentPlanUsingGET(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update payment plan
         * @param {UpdatePaymentPlanRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentPlanUsingPOST(updateRequest: UpdatePaymentPlanRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPlan>> {
            const localVarAxiosArgs = await PaymentPlanApiAxiosParamCreator(configuration).updatePaymentPlanUsingPOST(updateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentPlanApi - factory interface
 * @export
 */
export const PaymentPlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create payment plan
         * @param {CreatePaymentPlanRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentPlanUsingPOST(createRequest: CreatePaymentPlanRequest, options?: any): AxiosPromise<PaymentPlan> {
            return PaymentPlanApiFp(configuration).createPaymentPlanUsingPOST(createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete the payment plan
         * @param {DeletePaymentPlanRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentPlanUsingPOST(deleteRequest: DeletePaymentPlanRequest, options?: any): AxiosPromise<void> {
            return PaymentPlanApiFp(configuration).deletePaymentPlanUsingPOST(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a payment plan
         * @param {PaymentPlanListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPlanListUsingPOST(listRequest: PaymentPlanListRequest, options?: any): AxiosPromise<Array<PaymentPlan>> {
            return PaymentPlanApiFp(configuration).getPaymentPlanListUsingPOST(listRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get the payment plan
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPlanUsingGET(pubId: string, options?: any): AxiosPromise<PaymentPlan> {
            return PaymentPlanApiFp(configuration).getPaymentPlanUsingGET(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update payment plan
         * @param {UpdatePaymentPlanRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentPlanUsingPOST(updateRequest: UpdatePaymentPlanRequest, options?: any): AxiosPromise<PaymentPlan> {
            return PaymentPlanApiFp(configuration).updatePaymentPlanUsingPOST(updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentPlanApi - object-oriented interface
 * @export
 * @class PaymentPlanApi
 * @extends {BaseAPI}
 */
export class PaymentPlanApi extends BaseAPI {
    /**
     * 
     * @summary Create payment plan
     * @param {CreatePaymentPlanRequest} createRequest createRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentPlanApi
     */
    public createPaymentPlanUsingPOST(createRequest: CreatePaymentPlanRequest, options?: any) {
        return PaymentPlanApiFp(this.configuration).createPaymentPlanUsingPOST(createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete the payment plan
     * @param {DeletePaymentPlanRequest} deleteRequest deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentPlanApi
     */
    public deletePaymentPlanUsingPOST(deleteRequest: DeletePaymentPlanRequest, options?: any) {
        return PaymentPlanApiFp(this.configuration).deletePaymentPlanUsingPOST(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a payment plan
     * @param {PaymentPlanListRequest} listRequest listRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentPlanApi
     */
    public getPaymentPlanListUsingPOST(listRequest: PaymentPlanListRequest, options?: any) {
        return PaymentPlanApiFp(this.configuration).getPaymentPlanListUsingPOST(listRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get the payment plan
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentPlanApi
     */
    public getPaymentPlanUsingGET(pubId: string, options?: any) {
        return PaymentPlanApiFp(this.configuration).getPaymentPlanUsingGET(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update payment plan
     * @param {UpdatePaymentPlanRequest} updateRequest updateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentPlanApi
     */
    public updatePaymentPlanUsingPOST(updateRequest: UpdatePaymentPlanRequest, options?: any) {
        return PaymentPlanApiFp(this.configuration).updatePaymentPlanUsingPOST(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a user
         * @param {CreateUserRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST: async (createRequest: CreateUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequest' is not null or undefined
            if (createRequest === null || createRequest === undefined) {
                throw new RequiredError('createRequest','Required parameter createRequest was null or undefined when calling createUserUsingPOST.');
            }
            const localVarPath = `/api/user/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRequest !== undefined ? createRequest : {}) : (createRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete the user
         * @param {DeleteUserRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingPOST: async (deleteRequest: DeleteUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            if (deleteRequest === null || deleteRequest === undefined) {
                throw new RequiredError('deleteRequest','Required parameter deleteRequest was null or undefined when calling deleteUserUsingPOST.');
            }
            const localVarPath = `/api/user/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deleteRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteRequest !== undefined ? deleteRequest : {}) : (deleteRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get user list
         * @param {UserListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListUsingPOST: async (listRequest: UserListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'listRequest' is not null or undefined
            if (listRequest === null || listRequest === undefined) {
                throw new RequiredError('listRequest','Required parameter listRequest was null or undefined when calling getUserListUsingPOST.');
            }
            const localVarPath = `/api/user/list/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof listRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(listRequest !== undefined ? listRequest : {}) : (listRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get the payment plan
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsingGET: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling getUserUsingGET.');
            }
            const localVarPath = `/api/user/get/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the user
         * @param {UpdateUserRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPOST: async (updateRequest: UpdateUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            if (updateRequest === null || updateRequest === undefined) {
                throw new RequiredError('updateRequest','Required parameter updateRequest was null or undefined when calling updateUserUsingPOST.');
            }
            const localVarPath = `/api/user/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRequest !== undefined ? updateRequest : {}) : (updateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a user
         * @param {CreateUserRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsingPOST(createRequest: CreateUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).createUserUsingPOST(createRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete the user
         * @param {DeleteUserRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserUsingPOST(deleteRequest: DeleteUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).deleteUserUsingPOST(deleteRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get user list
         * @param {UserListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserListUsingPOST(listRequest: UserListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserWithCurrentAccess>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUserListUsingPOST(listRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get the payment plan
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsingGET(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUserUsingGET(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update the user
         * @param {UpdateUserRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserUsingPOST(updateRequest: UpdateUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).updateUserUsingPOST(updateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a user
         * @param {CreateUserRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(createRequest: CreateUserRequest, options?: any): AxiosPromise<User> {
            return UserApiFp(configuration).createUserUsingPOST(createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete the user
         * @param {DeleteUserRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingPOST(deleteRequest: DeleteUserRequest, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).deleteUserUsingPOST(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get user list
         * @param {UserListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListUsingPOST(listRequest: UserListRequest, options?: any): AxiosPromise<Array<UserWithCurrentAccess>> {
            return UserApiFp(configuration).getUserListUsingPOST(listRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get the payment plan
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsingGET(pubId: string, options?: any): AxiosPromise<User> {
            return UserApiFp(configuration).getUserUsingGET(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the user
         * @param {UpdateUserRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPOST(updateRequest: UpdateUserRequest, options?: any): AxiosPromise<User> {
            return UserApiFp(configuration).updateUserUsingPOST(updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Create a user
     * @param {CreateUserRequest} createRequest createRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUserUsingPOST(createRequest: CreateUserRequest, options?: any) {
        return UserApiFp(this.configuration).createUserUsingPOST(createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete the user
     * @param {DeleteUserRequest} deleteRequest deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserUsingPOST(deleteRequest: DeleteUserRequest, options?: any) {
        return UserApiFp(this.configuration).deleteUserUsingPOST(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get user list
     * @param {UserListRequest} listRequest listRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserListUsingPOST(listRequest: UserListRequest, options?: any) {
        return UserApiFp(this.configuration).getUserListUsingPOST(listRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get the payment plan
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserUsingGET(pubId: string, options?: any) {
        return UserApiFp(this.configuration).getUserUsingGET(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the user
     * @param {UpdateUserRequest} updateRequest updateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserUsingPOST(updateRequest: UpdateUserRequest, options?: any) {
        return UserApiFp(this.configuration).updateUserUsingPOST(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * WarmupApi - axios parameter creator
 * @export
 */
export const WarmupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Warmup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warmupUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/_ah/warmup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WarmupApi - functional programming interface
 * @export
 */
export const WarmupApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Warmup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async warmupUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await WarmupApiAxiosParamCreator(configuration).warmupUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WarmupApi - factory interface
 * @export
 */
export const WarmupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Warmup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warmupUsingGET(options?: any): AxiosPromise<string> {
            return WarmupApiFp(configuration).warmupUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WarmupApi - object-oriented interface
 * @export
 * @class WarmupApi
 * @extends {BaseAPI}
 */
export class WarmupApi extends BaseAPI {
    /**
     * 
     * @summary Warmup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarmupApi
     */
    public warmupUsingGET(options?: any) {
        return WarmupApiFp(this.configuration).warmupUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

}


