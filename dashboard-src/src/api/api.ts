// tslint:disable
/**
 * Func Api Title
 * Func Api Definition
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: func@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    capacity: number;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Asset
     */
    imageUrls: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    type: string;
    /**
     * 
     * @type {Array<WorkTimeRange>}
     * @memberof Asset
     */
    workTimeRanges: Array<WorkTimeRange>;
}
/**
 * 
 * @export
 * @interface AssetListRequest
 */
export interface AssetListRequest {
    /**
     * 
     * @type {string}
     * @memberof AssetListRequest
     */
    capacityFilter?: string;
}
/**
 * 
 * @export
 * @interface BookedAsset
 */
export interface BookedAsset {
    /**
     * 
     * @type {Asset}
     * @memberof BookedAsset
     */
    asset: Asset;
    /**
     * 
     * @type {string}
     * @memberof BookedAsset
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof BookedAsset
     */
    end: string;
    /**
     * 
     * @type {string}
     * @memberof BookedAsset
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof BookedAsset
     */
    start: string;
}
/**
 * 
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     * 
     * @type {Asset}
     * @memberof Booking
     */
    asset: Asset;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    end: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    start: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    status: string;
    /**
     * 
     * @type {UserData}
     * @memberof Booking
     */
    userData: UserData;
}
/**
 * 
 * @export
 * @interface BookingRequest
 */
export interface BookingRequest {
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    assetId: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    end: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof BookingRequest
     */
    start: string;
}
/**
 * 
 * @export
 * @interface CreateAssetRequest
 */
export interface CreateAssetRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateAssetRequest
     */
    capacity?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequest
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateAssetRequest
     */
    imageUrls?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequest
     */
    type: string;
    /**
     * 
     * @type {Array<WorkTimeRangeReq>}
     * @memberof CreateAssetRequest
     */
    workTimeRanges?: Array<WorkTimeRangeReq>;
}
/**
 * 
 * @export
 * @interface DeleteAssetRequest
 */
export interface DeleteAssetRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteAssetRequest
     */
    pubId: string;
}
/**
 * 
 * @export
 * @interface FindBookedAssetsRequest
 */
export interface FindBookedAssetsRequest {
    /**
     * 
     * @type {string}
     * @memberof FindBookedAssetsRequest
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof FindBookedAssetsRequest
     */
    date?: string;
}
/**
 * 
 * @export
 * @interface ListRequest
 */
export interface ListRequest {
    /**
     * 
     * @type {string}
     * @memberof ListRequest
     */
    assetId?: string;
    /**
     * 
     * @type {string}
     * @memberof ListRequest
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof ListRequest
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    mobile?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    accessToken: string;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    mobile?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface UpdateAssetRequest
 */
export interface UpdateAssetRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateAssetRequest
     */
    capacity?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateAssetRequest
     */
    imageUrls?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    pubId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAssetRequest
     */
    type: string;
    /**
     * 
     * @type {Array<WorkTimeRangeReq>}
     * @memberof UpdateAssetRequest
     */
    workTimeRanges?: Array<WorkTimeRangeReq>;
}
/**
 * 
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    phone: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    mobile: string;
}
/**
 * 
 * @export
 * @interface WorkTimeRange
 */
export interface WorkTimeRange {
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRange
     */
    end: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkTimeRange
     */
    isWeekend: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRange
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRange
     */
    start: string;
}
/**
 * 
 * @export
 * @interface WorkTimeRangeReq
 */
export interface WorkTimeRangeReq {
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeReq
     */
    end: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkTimeRangeReq
     */
    isWeekend?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeReq
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeReq
     */
    start: string;
}
/**
 * 
 * @export
 * @interface WorkTimeRangeRes
 */
export interface WorkTimeRangeRes {
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeRes
     */
    end: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkTimeRangeRes
     */
    isWeekend: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeRes
     */
    price: string;
    /**
     * 
     * @type {string}
     * @memberof WorkTimeRangeRes
     */
    start: string;
}

/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary list of assets
         * @param {AssetListRequest} assetListRequest assetListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetsListUsingPOST: async (assetListRequest: AssetListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetListRequest' is not null or undefined
            if (assetListRequest === null || assetListRequest === undefined) {
                throw new RequiredError('assetListRequest','Required parameter assetListRequest was null or undefined when calling assetsListUsingPOST.');
            }
            const localVarPath = `/api/assets/assetsList`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof assetListRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(assetListRequest !== undefined ? assetListRequest : {}) : (assetListRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create asset
         * @param {CreateAssetRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST: async (createRequest: CreateAssetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequest' is not null or undefined
            if (createRequest === null || createRequest === undefined) {
                throw new RequiredError('createRequest','Required parameter createRequest was null or undefined when calling createUsingPOST.');
            }
            const localVarPath = `/api/assets/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRequest !== undefined ? createRequest : {}) : (createRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteAssetRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingPOST: async (deleteRequest: DeleteAssetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            if (deleteRequest === null || deleteRequest === undefined) {
                throw new RequiredError('deleteRequest','Required parameter deleteRequest was null or undefined when calling deleteUsingPOST.');
            }
            const localVarPath = `/api/assets/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deleteRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteRequest !== undefined ? deleteRequest : {}) : (deleteRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling getUsingGET.');
            }
            const localVarPath = `/api/assets/get/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assets/test`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update asset
         * @param {UpdateAssetRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPOST: async (updateRequest: UpdateAssetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            if (updateRequest === null || updateRequest === undefined) {
                throw new RequiredError('updateRequest','Required parameter updateRequest was null or undefined when calling updateUsingPOST.');
            }
            const localVarPath = `/api/assets/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRequest !== undefined ? updateRequest : {}) : (updateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary list of assets
         * @param {AssetListRequest} assetListRequest assetListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetsListUsingPOST(assetListRequest: AssetListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Asset>>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).assetsListUsingPOST(assetListRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create asset
         * @param {CreateAssetRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUsingPOST(createRequest: CreateAssetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).createUsingPOST(createRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteAssetRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingPOST(deleteRequest: DeleteAssetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).deleteUsingPOST(deleteRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsingGET(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).getUsingGET(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).testUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update asset
         * @param {UpdateAssetRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPOST(updateRequest: UpdateAssetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {
            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).updateUsingPOST(updateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary list of assets
         * @param {AssetListRequest} assetListRequest assetListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetsListUsingPOST(assetListRequest: AssetListRequest, options?: any): AxiosPromise<Array<Asset>> {
            return AssetsApiFp(configuration).assetsListUsingPOST(assetListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create asset
         * @param {CreateAssetRequest} createRequest createRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(createRequest: CreateAssetRequest, options?: any): AxiosPromise<Asset> {
            return AssetsApiFp(configuration).createUsingPOST(createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete asset
         * @param {DeleteAssetRequest} deleteRequest deleteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingPOST(deleteRequest: DeleteAssetRequest, options?: any): AxiosPromise<void> {
            return AssetsApiFp(configuration).deleteUsingPOST(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET(pubId: string, options?: any): AxiosPromise<Asset> {
            return AssetsApiFp(configuration).getUsingGET(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testUsingGET(options?: any): AxiosPromise<string> {
            return AssetsApiFp(configuration).testUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update asset
         * @param {UpdateAssetRequest} updateRequest updateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPOST(updateRequest: UpdateAssetRequest, options?: any): AxiosPromise<Asset> {
            return AssetsApiFp(configuration).updateUsingPOST(updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI {
    /**
     * 
     * @summary list of assets
     * @param {AssetListRequest} assetListRequest assetListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public assetsListUsingPOST(assetListRequest: AssetListRequest, options?: any) {
        return AssetsApiFp(this.configuration).assetsListUsingPOST(assetListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create asset
     * @param {CreateAssetRequest} createRequest createRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public createUsingPOST(createRequest: CreateAssetRequest, options?: any) {
        return AssetsApiFp(this.configuration).createUsingPOST(createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete asset
     * @param {DeleteAssetRequest} deleteRequest deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public deleteUsingPOST(deleteRequest: DeleteAssetRequest, options?: any) {
        return AssetsApiFp(this.configuration).deleteUsingPOST(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get asset
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public getUsingGET(pubId: string, options?: any) {
        return AssetsApiFp(this.configuration).getUsingGET(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public testUsingGET(options?: any) {
        return AssetsApiFp(this.configuration).testUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update asset
     * @param {UpdateAssetRequest} updateRequest updateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public updateUsingPOST(updateRequest: UpdateAssetRequest, options?: any) {
        return AssetsApiFp(this.configuration).updateUsingPOST(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AuthAPIApi - axios parameter creator
 * @export
 */
export const AuthAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login with mobile and password
         * @param {LoginRequest} loginRequest loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST: async (loginRequest: LoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            if (loginRequest === null || loginRequest === undefined) {
                throw new RequiredError('loginRequest','Required parameter loginRequest was null or undefined when calling loginUsingPOST.');
            }
            const localVarPath = `/api/auth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register user
         * @param {RegisterRequest} registerRequest registerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST: async (registerRequest: RegisterRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            if (registerRequest === null || registerRequest === undefined) {
                throw new RequiredError('registerRequest','Required parameter registerRequest was null or undefined when calling registerUsingPOST.');
            }
            const localVarPath = `/api/auth/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof registerRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registerRequest !== undefined ? registerRequest : {}) : (registerRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthAPIApi - functional programming interface
 * @export
 */
export const AuthAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await AuthAPIApiAxiosParamCreator(configuration).getUsingGET1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {

                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Login with mobile and password
         * @param {LoginRequest} loginRequest loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsingPOST(loginRequest: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await AuthAPIApiAxiosParamCreator(configuration).loginUsingPOST(loginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register user
         * @param {RegisterRequest} registerRequest registerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUsingPOST(registerRequest: RegisterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthAPIApiAxiosParamCreator(configuration).registerUsingPOST(registerRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthAPIApi - factory interface
 * @export
 */
export const AuthAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary get asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET1(options?: any): AxiosPromise<UserDto> {
            return AuthAPIApiFp(configuration).getUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login with mobile and password
         * @param {LoginRequest} loginRequest loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST(loginRequest: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return AuthAPIApiFp(configuration).loginUsingPOST(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register user
         * @param {RegisterRequest} registerRequest registerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST(registerRequest: RegisterRequest, options?: any): AxiosPromise<void> {
            return AuthAPIApiFp(configuration).registerUsingPOST(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthAPIApi - object-oriented interface
 * @export
 * @class AuthAPIApi
 * @extends {BaseAPI}
 */
export class AuthAPIApi extends BaseAPI {
    /**
     * 
     * @summary get asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public getUsingGET1(options?: any) {
        return AuthAPIApiFp(this.configuration).getUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login with mobile and password
     * @param {LoginRequest} loginRequest loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public loginUsingPOST(loginRequest: LoginRequest, options?: any) {
        return AuthAPIApiFp(this.configuration).loginUsingPOST(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register user
     * @param {RegisterRequest} registerRequest registerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public registerUsingPOST(registerRequest: RegisterRequest, options?: any) {
        return AuthAPIApiFp(this.configuration).registerUsingPOST(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * BookingApi - axios parameter creator
 * @export
 */
export const BookingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveUsingPOST: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling approveUsingPOST.');
            }
            const localVarPath = `/api/booking/approve/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Book an asset
         * @param {BookingRequest} bookingRequest bookingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookUsingPOST: async (bookingRequest: BookingRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingRequest' is not null or undefined
            if (bookingRequest === null || bookingRequest === undefined) {
                throw new RequiredError('bookingRequest','Required parameter bookingRequest was null or undefined when calling bookUsingPOST.');
            }
            const localVarPath = `/api/booking/book`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bookingRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bookingRequest !== undefined ? bookingRequest : {}) : (bookingRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineUsingPOST: async (pubId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubId' is not null or undefined
            if (pubId === null || pubId === undefined) {
                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling declineUsingPOST.');
            }
            const localVarPath = `/api/booking/decline/{pubId}`
                .replace(`{${"pubId"}}`, encodeURIComponent(String(pubId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find booked assets
         * @param {FindBookedAssetsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBookedAssetsUsingPOST: async (request: FindBookedAssetsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling findBookedAssetsUsingPOST.');
            }
            const localVarPath = `/api/booking/booked`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Booking list
         * @param {ListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsingPOST: async (listRequest: ListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'listRequest' is not null or undefined
            if (listRequest === null || listRequest === undefined) {
                throw new RequiredError('listRequest','Required parameter listRequest was null or undefined when calling listUsingPOST.');
            }
            const localVarPath = `/api/booking/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth", ["read", "write", "foo"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof listRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(listRequest !== undefined ? listRequest : {}) : (listRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingApi - functional programming interface
 * @export
 */
export const BookingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveUsingPOST(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).approveUsingPOST(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Book an asset
         * @param {BookingRequest} bookingRequest bookingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookUsingPOST(bookingRequest: BookingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).bookUsingPOST(bookingRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Decline book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineUsingPOST(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).declineUsingPOST(pubId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Find booked assets
         * @param {FindBookedAssetsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findBookedAssetsUsingPOST(request: FindBookedAssetsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookedAsset>>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).findBookedAssetsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Booking list
         * @param {ListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsingPOST(listRequest: ListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Booking>>> {
            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).listUsingPOST(listRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BookingApi - factory interface
 * @export
 */
export const BookingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Approve book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveUsingPOST(pubId: string, options?: any): AxiosPromise<Booking> {
            return BookingApiFp(configuration).approveUsingPOST(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Book an asset
         * @param {BookingRequest} bookingRequest bookingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookUsingPOST(bookingRequest: BookingRequest, options?: any): AxiosPromise<Booking> {
            return BookingApiFp(configuration).bookUsingPOST(bookingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline book an asset
         * @param {string} pubId pubId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineUsingPOST(pubId: string, options?: any): AxiosPromise<Booking> {
            return BookingApiFp(configuration).declineUsingPOST(pubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find booked assets
         * @param {FindBookedAssetsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBookedAssetsUsingPOST(request: FindBookedAssetsRequest, options?: any): AxiosPromise<Array<BookedAsset>> {
            return BookingApiFp(configuration).findBookedAssetsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Booking list
         * @param {ListRequest} listRequest listRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsingPOST(listRequest: ListRequest, options?: any): AxiosPromise<Array<Booking>> {
            return BookingApiFp(configuration).listUsingPOST(listRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookingApi - object-oriented interface
 * @export
 * @class BookingApi
 * @extends {BaseAPI}
 */
export class BookingApi extends BaseAPI {
    /**
     * 
     * @summary Approve book an asset
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public approveUsingPOST(pubId: string, options?: any) {
        return BookingApiFp(this.configuration).approveUsingPOST(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Book an asset
     * @param {BookingRequest} bookingRequest bookingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public bookUsingPOST(bookingRequest: BookingRequest, options?: any) {
        return BookingApiFp(this.configuration).bookUsingPOST(bookingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline book an asset
     * @param {string} pubId pubId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public declineUsingPOST(pubId: string, options?: any) {
        return BookingApiFp(this.configuration).declineUsingPOST(pubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find booked assets
     * @param {FindBookedAssetsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public findBookedAssetsUsingPOST(request: FindBookedAssetsRequest, options?: any) {
        return BookingApiFp(this.configuration).findBookedAssetsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Booking list
     * @param {ListRequest} listRequest listRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public listUsingPOST(listRequest: ListRequest, options?: any) {
        return BookingApiFp(this.configuration).listUsingPOST(listRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


