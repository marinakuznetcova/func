{"version":3,"sources":["webpack:///./app/components/TodoItem/style.css?4c11","webpack:///./app/components/Footer/style.css?30f7","webpack:///./app/components/TodoTextInput/style.css?71e8","webpack:///./app/components/TodoList/style.css?14c4","webpack:///./app/containers/TodoContainer/style.css","webpack:///./app/constants/todos.ts","webpack:///./app/components/TodoTextInput/index.tsx","webpack:///./app/components/Header/index.tsx","webpack:///./app/components/Footer/index.tsx","webpack:///./app/components/TodoItem/index.tsx","webpack:///./app/components/TodoList/index.tsx","webpack:///./app/models/TodoModel.ts","webpack:///./app/containers/TodoContainer/index.tsx","webpack:///./app/stores/TodoStore.ts","webpack:///./api/base.ts","webpack:///./api/api.ts","webpack:///./app/index.tsx","webpack:///./main.tsx"],"names":["module","exports","TodoFilter","props","context","handleSubmit","e","text","target","value","trim","which","onSave","newTodo","setState","handleChange","handleBlur","state","render","classes","this","editing","className","type","autoFocus","placeholder","onBlur","onChange","onKeyDown","handleSave","length","addTodo","TODO_FILTER_TYPES","ALL","ACTIVE","COMPLETED","TODO_FILTER_TITLES","TODO_FILTER_LOCATION_HASH","renderTodoCount","activeCount","itemWord","renderFilterLink","filter","title","selectedFilter","onChangeFilter","style","cursor","onClick","renderClearButton","completedCount","onClearCompleted","map","key","children","handleDoubleClick","handleToggleCheckbox","todo","undefined","checked","completed","updateTodo","handleClickDeleteButton","deleteTodo","id","data","editTodo","element","onDoubleClick","handleToggleAll","preventDefault","completeAll","renderToggleAll","todos","actions","TodoModel","generateId","nextId","TodoContainer","todoStore","defaultTodos","store","useLocalStore","item","push","clearCompleted","useTodoStore","history","location","setFilter","nextFilter","Object","keys","Number","find","hash","handleFilterChange","nextHash","replace","itemsToDisplay","activeTodos","completedTodos","BASE_PATH","configuration","basePath","axios","a","field","msg","name","Error","AssetsApiAxiosParamCreator","createUsingPOST","createRequest","options","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","localVarAccessTokenValue","query","search","headersFromBaseOptions","headers","needsSerialization","JSON","stringify","url","deleteUsingPOST","deleteRequest","getUsingGET","pubId","localVarPath","encodeURIComponent","String","listUsingGET","updateUsingPOST","updateRequest","AssetsApiFp","localVarAxiosArgs","axiosRequestArgs","request","AuthAPIApiAxiosParamCreator","then","getUsingGET1","loginUsingPOST","loginRequest","registerUsingPOST","registerRequest","AuthAPIApiFp","BookingApiAxiosParamCreator","approveUsingPOST","bookUsingPOST","bookingRequest","declineUsingPOST","listUsingPOST","listRequest","BookingApiFp","App","AuthAPIApi","console","log","catch","path","component","document","getElementById"],"mappings":"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","file":"app.f05151e0abd73cd6daa5.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"_3Ivjf\",\"toggle\":\"gyYcA\",\"destroy\":\"_6oXTL\",\"edit\":\"Dlke2\",\"editing\":\"atkUq _3Ivjf\",\"view\":\"R2I1d\",\"completed\":\"_2d4Cr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"_11G5b\",\"filters\":\"_2Rdg5\",\"selected\":\"KA4tP\",\"count\":\"_2aiYj\",\"clearCompleted\":\"_2VhED\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"new\":\"_1LCq9\",\"edit\":\"_2TStV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"_1MAoA\",\"normal\":\"l9hMg\",\"editing\":\"_2LE8Z\",\"edit\":\"_3IEu8\",\"view\":\"cswuJ\",\"toggle\":\"_1euYG\",\"completed\":\"_1VEnC\",\"destroy\":\"_3_fjc\",\"toggleAll\":\"_1L1bM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"Mt6qy\"};","export enum TodoFilter {\n  ALL = 0,\n  ACTIVE,\n  COMPLETED,\n}\n\nexport const TODO_FILTER_TYPES = [\n  TodoFilter.ALL,\n  TodoFilter.ACTIVE,\n  TodoFilter.COMPLETED,\n];\n\nexport const TODO_FILTER_TITLES = {\n  [TodoFilter.ALL]: 'All',\n  [TodoFilter.ACTIVE]: 'Active',\n  [TodoFilter.COMPLETED]: 'Completed',\n};\n\nexport const TODO_FILTER_LOCATION_HASH = {\n  [TodoFilter.ALL]: '#',\n  [TodoFilter.ACTIVE]: '#active',\n  [TodoFilter.COMPLETED]: '#completed',\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as style from './style.css';\n\nexport interface TodoTextInputProps {\n  text?: string;\n  placeholder?: string;\n  newTodo?: boolean;\n  editing?: boolean;\n  onSave: (text: string) => any;\n}\n\nexport interface TodoTextInputState {\n  text: string;\n}\n\nexport class TodoTextInput extends React.Component<\n  TodoTextInputProps,\n  TodoTextInputState\n> {\n  constructor(props?: TodoTextInputProps, context?: any) {\n    super(props, context);\n    this.state = {\n      text: this.props.text || '',\n    };\n  }\n\n  private handleSubmit = (e) => {\n    const text = e.target.value.trim();\n    if (e.which === 13) {\n      this.props.onSave(text);\n      if (this.props.newTodo) {\n        this.setState({ text: '' });\n      }\n    }\n  };\n\n  private handleChange = (e) => {\n    this.setState({ text: e.target.value });\n  };\n\n  private handleBlur = (e) => {\n    const text = e.target.value.trim();\n    if (!this.props.newTodo) {\n      this.props.onSave(text);\n    }\n  };\n\n  render() {\n    const classes = classNames(\n      {\n        [style.edit]: this.props.editing,\n        [style.new]: this.props.newTodo,\n      },\n      style.normal\n    );\n\n    return (\n      <input\n        className={classes}\n        type=\"text\"\n        autoFocus\n        placeholder={this.props.placeholder}\n        value={this.state.text}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange}\n        onKeyDown={this.handleSubmit}\n      />\n    );\n  }\n}\n\nexport default TodoTextInput;\n","import * as React from 'react';\nimport { TodoTextInput } from 'app/components/TodoTextInput';\nimport { TodoModel } from 'app/models/TodoModel';\n\nexport interface HeaderProps {\n  addTodo: (todo: Partial<TodoModel>) => any;\n}\n\nexport interface HeaderState {\n  /* empty */\n}\n\nexport class Header extends React.Component<HeaderProps, HeaderState> {\n  private handleSave = (text: string) => {\n    if (text.length) {\n      this.props.addTodo({ text });\n    }\n  };\n\n  render() {\n    return (\n      <header>\n        <h1>Todos</h1>\n        <TodoTextInput\n          newTodo\n          onSave={this.handleSave}\n          placeholder=\"What needs to be done?\"\n        />\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as style from './style.css';\nimport {\n  TodoFilter,\n  TODO_FILTER_TITLES,\n  TODO_FILTER_TYPES,\n} from 'app/constants';\n\nexport interface FooterProps {\n  filter: TodoFilter;\n  activeCount: number;\n  completedCount: number;\n  onChangeFilter: (filter: TodoFilter) => any;\n  onClearCompleted: () => any;\n}\n\nexport interface FooterState {\n  /* empty */\n}\n\nexport class Footer extends React.Component<FooterProps, FooterState> {\n  renderTodoCount() {\n    const { activeCount } = this.props;\n    const itemWord = activeCount === 1 ? 'item' : 'items';\n\n    return (\n      <span className={style.count}>\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n    );\n  }\n\n  renderFilterLink(filter: TodoFilter) {\n    const title = TODO_FILTER_TITLES[filter];\n    const { filter: selectedFilter, onChangeFilter } = this.props;\n    const className = classNames({\n      [style.selected]: filter === selectedFilter,\n    });\n\n    return (\n      <a\n        className={className}\n        style={{ cursor: 'pointer' }}\n        onClick={() => onChangeFilter(filter)}\n      >\n        {title}\n      </a>\n    );\n  }\n\n  renderClearButton() {\n    const { completedCount, onClearCompleted } = this.props;\n    if (completedCount > 0) {\n      return (\n        <button className={style.clearCompleted} onClick={onClearCompleted} />\n      );\n    }\n  }\n\n  render() {\n    return (\n      <footer className={style.normal}>\n        {this.renderTodoCount()}\n        <ul className={style.filters}>\n          {TODO_FILTER_TYPES.map((filter) => (\n            <li key={filter} children={this.renderFilterLink(filter)} />\n          ))}\n        </ul>\n        {this.renderClearButton()}\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { TodoTextInput } from 'app/components/TodoTextInput';\nimport { TodoModel } from 'app/models/TodoModel';\nimport * as style from './style.css';\n\nexport interface TodoActions {\n  editTodo: (id: number, data: Partial<TodoModel>) => any;\n  deleteTodo: (id: number) => any;\n}\n\nexport interface TodoProps extends TodoActions {\n  todo: TodoModel;\n}\n\nexport interface TodoState {\n  editing: boolean;\n}\n\nexport class TodoItem extends React.Component<TodoProps, TodoState> {\n  constructor(props?: TodoProps, context?: any) {\n    super(props, context);\n    this.state = { editing: false };\n  }\n\n  private handleDoubleClick = (e: React.SyntheticEvent<any>) => {\n    this.setState({ editing: true });\n  };\n\n  private handleToggleCheckbox = (e: React.SyntheticEvent<any>) => {\n    const { todo } = this.props;\n    const target = e.target as any;\n    if (\n      target &&\n      target.checked !== undefined &&\n      target.checked !== todo.completed\n    ) {\n      this.updateTodo({ completed: target.checked });\n    }\n  };\n\n  private handleClickDeleteButton = (e: React.SyntheticEvent<any>) => {\n    const { todo, deleteTodo } = this.props;\n    deleteTodo(todo.id);\n  };\n\n  private updateTodo = (data: Partial<TodoModel>) => {\n    const { todo } = this.props;\n    if (data.text !== undefined && data.text.trim().length === 0) {\n      this.props.deleteTodo(todo.id);\n    } else {\n      this.props.editTodo(todo.id, data);\n    }\n    this.setState({ editing: false });\n  };\n\n  render() {\n    const { todo } = this.props;\n\n    const element = this.state.editing ? (\n      <TodoTextInput\n        text={todo.text}\n        editing={this.state.editing}\n        onSave={(text) => this.updateTodo({ text })}\n      />\n    ) : (\n      <div className={style.view}>\n        <input\n          className={style.toggle}\n          type=\"checkbox\"\n          checked={todo.completed}\n          onChange={this.handleToggleCheckbox}\n        />\n\n        <label onDoubleClick={this.handleDoubleClick}>{todo.text}</label>\n\n        <button\n          className={style.destroy}\n          onClick={this.handleClickDeleteButton}\n        />\n      </div>\n    );\n\n    const classes = classNames({\n      [style.completed]: todo.completed,\n      [style.editing]: this.state.editing,\n      [style.normal]: !this.state.editing,\n    });\n\n    return <li className={classes}>{element}</li>;\n  }\n}\n\nexport default TodoItem;\n","import * as React from 'react';\nimport { TodoItem, TodoActions } from 'app/components/TodoItem';\nimport { TodoModel } from 'app/models/TodoModel';\nimport * as style from './style.css';\n\nexport interface TodoListProps extends TodoActions {\n  todos: TodoModel[];\n  completeAll: () => any;\n}\n\nexport interface TodoListState {}\n\nexport class TodoList extends React.Component<TodoListProps, TodoListState> {\n  constructor(props?: TodoListProps, context?: any) {\n    super(props, context);\n  }\n\n  private handleToggleAll = (e: React.SyntheticEvent<any>) => {\n    e.preventDefault();\n    this.props.completeAll();\n  };\n\n  renderToggleAll() {\n    const { todos } = this.props;\n    const completedCount = todos.length;\n    if (todos.length > 0) {\n      return (\n        <input\n          className={style.toggleAll}\n          type=\"checkbox\"\n          checked={completedCount === todos.length}\n          onChange={this.handleToggleAll}\n        />\n      );\n    }\n  }\n\n  render() {\n    const { todos, ...actions } = this.props;\n    return (\n      <section className={style.main}>\n        {this.renderToggleAll()}\n        <ul className={style.normal}>\n          {todos.map((todo) => (\n            <TodoItem key={todo.id} todo={todo} {...actions} />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nexport default TodoList;\n","import { observable } from 'mobx';\n\nexport class TodoModel {\n  readonly id: number;\n  @observable public text: string;\n  @observable public completed: boolean;\n\n  constructor(text: string, completed: boolean = false) {\n    this.id = TodoModel.generateId();\n    this.text = text;\n    this.completed = completed;\n  }\n\n  static nextId = 1;\n  static generateId() {\n    return this.nextId++;\n  }\n}\n\nexport default TodoModel;\n","import * as React from 'react';\nimport * as style from './style.css';\nimport { observer } from 'mobx-react';\nimport { useLocation, useHistory } from 'react-router';\nimport { Header } from 'app/components/Header';\nimport { Footer } from 'app/components/Footer';\nimport { TodoList } from 'app/components/TodoList';\nimport { TodoModel } from 'app/models';\nimport { useTodoStore } from 'app/stores/TodoStore';\nimport { TODO_FILTER_LOCATION_HASH, TodoFilter } from 'app/constants';\n\nexport const TodoContainer = observer(() => {\n  const todoStore = useTodoStore([\n    new TodoModel('Use MobX'),\n    new TodoModel('Use React'),\n  ]);\n  const history = useHistory();\n  const location = useLocation();\n  const [filter, setFilter] = React.useState(TodoFilter.ALL);\n\n  // location change callback\n  React.useEffect(() => {\n    const nextFilter = Object.keys(TODO_FILTER_LOCATION_HASH)\n      .map((key) => Number(key) as TodoFilter)\n      .find((item) => TODO_FILTER_LOCATION_HASH[item] === location.hash);\n    setFilter(nextFilter ?? TodoFilter.ALL);\n  }, [location.hash, setFilter]);\n\n  // filter change callback\n  const handleFilterChange = React.useCallback(\n    (nextFilter: TodoFilter) => {\n      setFilter(nextFilter);\n      const nextHash = TODO_FILTER_LOCATION_HASH[nextFilter];\n      history.replace(nextHash);\n    },\n    [history, setFilter]\n  );\n\n  const itemsToDisplay =\n    filter === TodoFilter.ALL\n      ? todoStore.todos\n      : filter === TodoFilter.ACTIVE\n      ? todoStore.activeTodos\n      : todoStore.completedTodos;\n\n  return (\n    <div className={style.normal}>\n      <Header addTodo={todoStore.addTodo} />\n      <TodoList\n        todos={itemsToDisplay}\n        completeAll={todoStore.completeAll}\n        deleteTodo={todoStore.deleteTodo}\n        editTodo={todoStore.editTodo}\n      />\n      <Footer\n        filter={filter}\n        activeCount={todoStore.activeTodos.length}\n        completedCount={todoStore.completedTodos.length}\n        onClearCompleted={todoStore.clearCompleted}\n        onChangeFilter={handleFilterChange}\n      />\n    </div>\n  );\n});\n","import { TodoModel } from 'app/models';\nimport { useLocalStore } from 'mobx-react';\n\nexport type TodoStore = ReturnType<typeof useTodoStore>;\nexport const useTodoStore = (defaultTodos: TodoModel[] = []) => {\n  const store = useLocalStore(() => ({\n    todos: defaultTodos,\n    get activeTodos() {\n      return store.todos.filter((todo) => !todo.completed);\n    },\n    get completedTodos() {\n      return store.todos.filter((todo) => todo.completed);\n    },\n    addTodo(item: Partial<TodoModel>): void {\n      store.todos.push(new TodoModel(item.text, item.completed));\n    },\n    editTodo(id: number, data: Partial<TodoModel>): void {\n      store.todos = store.todos.map((todo) => {\n        if (todo.id === id) {\n          if (typeof data.completed == 'boolean') {\n            todo.completed = data.completed;\n          }\n          if (typeof data.text == 'string') {\n            todo.text = data.text;\n          }\n        }\n        return todo;\n      });\n    },\n    deleteTodo(id: number): void {\n      store.todos = store.todos.filter((todo) => todo.id !== id);\n    },\n    completeAll(): void {\n      store.todos = store.todos.map((todo) => ({ ...todo, completed: true }));\n    },\n    clearCompleted(): void {\n      store.todos = store.todos.filter((todo) => !todo.completed);\n    },\n  }));\n  return store;\n};\n","// tslint:disable\n/**\n * Func Api Title\n * Func Api Definition\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: func@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Func Api Title\n * Func Api Definition\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: func@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Asset\n */\nexport interface Asset {\n    /**\n     * \n     * @type {string}\n     * @memberof Asset\n     */\n    description: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Asset\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Asset\n     */\n    pubId: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Asset\n     */\n    type: string;\n    /**\n     * \n     * @type {Array<WorkTimeRange>}\n     * @memberof Asset\n     */\n    workTimeRanges: Array<WorkTimeRange>;\n}\n/**\n * \n * @export\n * @interface Booking\n */\nexport interface Booking {\n    /**\n     * \n     * @type {Asset}\n     * @memberof Booking\n     */\n    asset: Asset;\n    /**\n     * \n     * @type {string}\n     * @memberof Booking\n     */\n    date: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Booking\n     */\n    description: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Booking\n     */\n    end: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Booking\n     */\n    pubId: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Booking\n     */\n    start: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Booking\n     */\n    status: string;\n    /**\n     * \n     * @type {UserData}\n     * @memberof Booking\n     */\n    userData: UserData;\n}\n/**\n * \n * @export\n * @interface BookingRequest\n */\nexport interface BookingRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof BookingRequest\n     */\n    assetId: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BookingRequest\n     */\n    date: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BookingRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BookingRequest\n     */\n    end: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BookingRequest\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BookingRequest\n     */\n    phone: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BookingRequest\n     */\n    start: string;\n}\n/**\n * \n * @export\n * @interface CreateAssetRequest\n */\nexport interface CreateAssetRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAssetRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAssetRequest\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAssetRequest\n     */\n    type: string;\n    /**\n     * \n     * @type {Array<WorkTimeRangeReq>}\n     * @memberof CreateAssetRequest\n     */\n    workTimeRanges?: Array<WorkTimeRangeReq>;\n}\n/**\n * \n * @export\n * @interface DeleteAssetRequest\n */\nexport interface DeleteAssetRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof DeleteAssetRequest\n     */\n    pubId: string;\n}\n/**\n * \n * @export\n * @interface ListRequest\n */\nexport interface ListRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ListRequest\n     */\n    assetId?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListRequest\n     */\n    date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListRequest\n     */\n    status?: string;\n}\n/**\n * \n * @export\n * @interface LoginRequest\n */\nexport interface LoginRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    mobile?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    password?: string;\n}\n/**\n * \n * @export\n * @interface LoginResponse\n */\nexport interface LoginResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResponse\n     */\n    accessToken: string;\n}\n/**\n * \n * @export\n * @interface RegisterRequest\n */\nexport interface RegisterRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RegisterRequest\n     */\n    mobile?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegisterRequest\n     */\n    password?: string;\n}\n/**\n * \n * @export\n * @interface UpdateAssetRequest\n */\nexport interface UpdateAssetRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateAssetRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateAssetRequest\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateAssetRequest\n     */\n    pubId: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateAssetRequest\n     */\n    type: string;\n    /**\n     * \n     * @type {Array<WorkTimeRangeReq>}\n     * @memberof UpdateAssetRequest\n     */\n    workTimeRanges?: Array<WorkTimeRangeReq>;\n}\n/**\n * \n * @export\n * @interface UserData\n */\nexport interface UserData {\n    /**\n     * \n     * @type {string}\n     * @memberof UserData\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserData\n     */\n    phone: string;\n}\n/**\n * \n * @export\n * @interface UserDto\n */\nexport interface UserDto {\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    mobile: string;\n}\n/**\n * \n * @export\n * @interface WorkTimeRange\n */\nexport interface WorkTimeRange {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkTimeRange\n     */\n    end: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkTimeRange\n     */\n    price: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkTimeRange\n     */\n    start: string;\n}\n/**\n * \n * @export\n * @interface WorkTimeRangeReq\n */\nexport interface WorkTimeRangeReq {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkTimeRangeReq\n     */\n    end: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkTimeRangeReq\n     */\n    price: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkTimeRangeReq\n     */\n    start: string;\n}\n/**\n * \n * @export\n * @interface WorkTimeRangeRes\n */\nexport interface WorkTimeRangeRes {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkTimeRangeRes\n     */\n    end: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkTimeRangeRes\n     */\n    price: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkTimeRangeRes\n     */\n    start: string;\n}\n\n/**\n * AssetsApi - axios parameter creator\n * @export\n */\nexport const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create asset\n         * @param {CreateAssetRequest} createRequest createRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsingPOST: async (createRequest: CreateAssetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'createRequest' is not null or undefined\n            if (createRequest === null || createRequest === undefined) {\n                throw new RequiredError('createRequest','Required parameter createRequest was null or undefined when calling createUsingPOST.');\n            }\n            const localVarPath = `/assets/create`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof createRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRequest !== undefined ? createRequest : {}) : (createRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary delete asset\n         * @param {DeleteAssetRequest} deleteRequest deleteRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUsingPOST: async (deleteRequest: DeleteAssetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'deleteRequest' is not null or undefined\n            if (deleteRequest === null || deleteRequest === undefined) {\n                throw new RequiredError('deleteRequest','Required parameter deleteRequest was null or undefined when calling deleteUsingPOST.');\n            }\n            const localVarPath = `/assets/delete`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof deleteRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteRequest !== undefined ? deleteRequest : {}) : (deleteRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get asset\n         * @param {string} pubId pubId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsingGET: async (pubId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pubId' is not null or undefined\n            if (pubId === null || pubId === undefined) {\n                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling getUsingGET.');\n            }\n            const localVarPath = `/assets/get/{pubId}`\n                .replace(`{${\"pubId\"}}`, encodeURIComponent(String(pubId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary list of assets\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsingGET: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/assets/list`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary update asset\n         * @param {UpdateAssetRequest} updateRequest updateRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUsingPOST: async (updateRequest: UpdateAssetRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'updateRequest' is not null or undefined\n            if (updateRequest === null || updateRequest === undefined) {\n                throw new RequiredError('updateRequest','Required parameter updateRequest was null or undefined when calling updateUsingPOST.');\n            }\n            const localVarPath = `/assets/update`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof updateRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRequest !== undefined ? updateRequest : {}) : (updateRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AssetsApi - functional programming interface\n * @export\n */\nexport const AssetsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create asset\n         * @param {CreateAssetRequest} createRequest createRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createUsingPOST(createRequest: CreateAssetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {\n            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).createUsingPOST(createRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary delete asset\n         * @param {DeleteAssetRequest} deleteRequest deleteRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteUsingPOST(deleteRequest: DeleteAssetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).deleteUsingPOST(deleteRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary get asset\n         * @param {string} pubId pubId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUsingGET(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {\n            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).getUsingGET(pubId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary list of assets\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Asset>>> {\n            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).listUsingGET(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary update asset\n         * @param {UpdateAssetRequest} updateRequest updateRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUsingPOST(updateRequest: UpdateAssetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {\n            const localVarAxiosArgs = await AssetsApiAxiosParamCreator(configuration).updateUsingPOST(updateRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * AssetsApi - factory interface\n * @export\n */\nexport const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create asset\n         * @param {CreateAssetRequest} createRequest createRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsingPOST(createRequest: CreateAssetRequest, options?: any): AxiosPromise<Asset> {\n            return AssetsApiFp(configuration).createUsingPOST(createRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary delete asset\n         * @param {DeleteAssetRequest} deleteRequest deleteRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUsingPOST(deleteRequest: DeleteAssetRequest, options?: any): AxiosPromise<void> {\n            return AssetsApiFp(configuration).deleteUsingPOST(deleteRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get asset\n         * @param {string} pubId pubId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsingGET(pubId: string, options?: any): AxiosPromise<Asset> {\n            return AssetsApiFp(configuration).getUsingGET(pubId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary list of assets\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsingGET(options?: any): AxiosPromise<Array<Asset>> {\n            return AssetsApiFp(configuration).listUsingGET(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary update asset\n         * @param {UpdateAssetRequest} updateRequest updateRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUsingPOST(updateRequest: UpdateAssetRequest, options?: any): AxiosPromise<Asset> {\n            return AssetsApiFp(configuration).updateUsingPOST(updateRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AssetsApi - object-oriented interface\n * @export\n * @class AssetsApi\n * @extends {BaseAPI}\n */\nexport class AssetsApi extends BaseAPI {\n    /**\n     * \n     * @summary Create asset\n     * @param {CreateAssetRequest} createRequest createRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AssetsApi\n     */\n    public createUsingPOST(createRequest: CreateAssetRequest, options?: any) {\n        return AssetsApiFp(this.configuration).createUsingPOST(createRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary delete asset\n     * @param {DeleteAssetRequest} deleteRequest deleteRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AssetsApi\n     */\n    public deleteUsingPOST(deleteRequest: DeleteAssetRequest, options?: any) {\n        return AssetsApiFp(this.configuration).deleteUsingPOST(deleteRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get asset\n     * @param {string} pubId pubId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AssetsApi\n     */\n    public getUsingGET(pubId: string, options?: any) {\n        return AssetsApiFp(this.configuration).getUsingGET(pubId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary list of assets\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AssetsApi\n     */\n    public listUsingGET(options?: any) {\n        return AssetsApiFp(this.configuration).listUsingGET(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary update asset\n     * @param {UpdateAssetRequest} updateRequest updateRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AssetsApi\n     */\n    public updateUsingPOST(updateRequest: UpdateAssetRequest, options?: any) {\n        return AssetsApiFp(this.configuration).updateUsingPOST(updateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n/**\n * AuthAPIApi - axios parameter creator\n * @export\n */\nexport const AuthAPIApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary get asset\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsingGET1: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/auth/get`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Login with mobile and password\n         * @param {LoginRequest} loginRequest loginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginUsingPOST: async (loginRequest: LoginRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'loginRequest' is not null or undefined\n            if (loginRequest === null || loginRequest === undefined) {\n                throw new RequiredError('loginRequest','Required parameter loginRequest was null or undefined when calling loginUsingPOST.');\n            }\n            const localVarPath = `/auth/login`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof loginRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Register user\n         * @param {RegisterRequest} registerRequest registerRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        registerUsingPOST: async (registerRequest: RegisterRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'registerRequest' is not null or undefined\n            if (registerRequest === null || registerRequest === undefined) {\n                throw new RequiredError('registerRequest','Required parameter registerRequest was null or undefined when calling registerUsingPOST.');\n            }\n            const localVarPath = `/auth/register`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof registerRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registerRequest !== undefined ? registerRequest : {}) : (registerRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthAPIApi - functional programming interface\n * @export\n */\nexport const AuthAPIApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary get asset\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {\n            const localVarAxiosArgs = await AuthAPIApiAxiosParamCreator(configuration).getUsingGET1(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Login with mobile and password\n         * @param {LoginRequest} loginRequest loginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async loginUsingPOST(loginRequest: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {\n            const localVarAxiosArgs = await AuthAPIApiAxiosParamCreator(configuration).loginUsingPOST(loginRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Register user\n         * @param {RegisterRequest} registerRequest registerRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async registerUsingPOST(registerRequest: RegisterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await AuthAPIApiAxiosParamCreator(configuration).registerUsingPOST(registerRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * AuthAPIApi - factory interface\n * @export\n */\nexport const AuthAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary get asset\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsingGET1(options?: any): AxiosPromise<UserDto> {\n            return AuthAPIApiFp(configuration).getUsingGET1(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Login with mobile and password\n         * @param {LoginRequest} loginRequest loginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginUsingPOST(loginRequest: LoginRequest, options?: any): AxiosPromise<LoginResponse> {\n            return AuthAPIApiFp(configuration).loginUsingPOST(loginRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Register user\n         * @param {RegisterRequest} registerRequest registerRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        registerUsingPOST(registerRequest: RegisterRequest, options?: any): AxiosPromise<void> {\n            return AuthAPIApiFp(configuration).registerUsingPOST(registerRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AuthAPIApi - object-oriented interface\n * @export\n * @class AuthAPIApi\n * @extends {BaseAPI}\n */\nexport class AuthAPIApi extends BaseAPI {\n    /**\n     * \n     * @summary get asset\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthAPIApi\n     */\n    public getUsingGET1(options?: any) {\n        return AuthAPIApiFp(this.configuration).getUsingGET1(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Login with mobile and password\n     * @param {LoginRequest} loginRequest loginRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthAPIApi\n     */\n    public loginUsingPOST(loginRequest: LoginRequest, options?: any) {\n        return AuthAPIApiFp(this.configuration).loginUsingPOST(loginRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Register user\n     * @param {RegisterRequest} registerRequest registerRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthAPIApi\n     */\n    public registerUsingPOST(registerRequest: RegisterRequest, options?: any) {\n        return AuthAPIApiFp(this.configuration).registerUsingPOST(registerRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n/**\n * BookingApi - axios parameter creator\n * @export\n */\nexport const BookingApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Approve book an asset\n         * @param {string} pubId pubId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        approveUsingPOST: async (pubId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pubId' is not null or undefined\n            if (pubId === null || pubId === undefined) {\n                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling approveUsingPOST.');\n            }\n            const localVarPath = `/booking/approve/{pubId}`\n                .replace(`{${\"pubId\"}}`, encodeURIComponent(String(pubId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Book an asset\n         * @param {BookingRequest} bookingRequest bookingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bookUsingPOST: async (bookingRequest: BookingRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'bookingRequest' is not null or undefined\n            if (bookingRequest === null || bookingRequest === undefined) {\n                throw new RequiredError('bookingRequest','Required parameter bookingRequest was null or undefined when calling bookUsingPOST.');\n            }\n            const localVarPath = `/booking/book`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof bookingRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bookingRequest !== undefined ? bookingRequest : {}) : (bookingRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Decline book an asset\n         * @param {string} pubId pubId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        declineUsingPOST: async (pubId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pubId' is not null or undefined\n            if (pubId === null || pubId === undefined) {\n                throw new RequiredError('pubId','Required parameter pubId was null or undefined when calling declineUsingPOST.');\n            }\n            const localVarPath = `/booking/decline/{pubId}`\n                .replace(`{${\"pubId\"}}`, encodeURIComponent(String(pubId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Booking list\n         * @param {ListRequest} listRequest listRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsingPOST: async (listRequest: ListRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'listRequest' is not null or undefined\n            if (listRequest === null || listRequest === undefined) {\n                throw new RequiredError('listRequest','Required parameter listRequest was null or undefined when calling listUsingPOST.');\n            }\n            const localVarPath = `/booking/list`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication oauth required\n            // oauth required\n            if (configuration && configuration.accessToken) {\n                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken(\"oauth\", [\"read\", \"write\", \"foo\"])\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof listRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(listRequest !== undefined ? listRequest : {}) : (listRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * BookingApi - functional programming interface\n * @export\n */\nexport const BookingApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Approve book an asset\n         * @param {string} pubId pubId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async approveUsingPOST(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {\n            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).approveUsingPOST(pubId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Book an asset\n         * @param {BookingRequest} bookingRequest bookingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bookUsingPOST(bookingRequest: BookingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {\n            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).bookUsingPOST(bookingRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Decline book an asset\n         * @param {string} pubId pubId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async declineUsingPOST(pubId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>> {\n            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).declineUsingPOST(pubId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Booking list\n         * @param {ListRequest} listRequest listRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listUsingPOST(listRequest: ListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Booking>>> {\n            const localVarAxiosArgs = await BookingApiAxiosParamCreator(configuration).listUsingPOST(listRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * BookingApi - factory interface\n * @export\n */\nexport const BookingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Approve book an asset\n         * @param {string} pubId pubId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        approveUsingPOST(pubId: string, options?: any): AxiosPromise<Booking> {\n            return BookingApiFp(configuration).approveUsingPOST(pubId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Book an asset\n         * @param {BookingRequest} bookingRequest bookingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bookUsingPOST(bookingRequest: BookingRequest, options?: any): AxiosPromise<Booking> {\n            return BookingApiFp(configuration).bookUsingPOST(bookingRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Decline book an asset\n         * @param {string} pubId pubId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        declineUsingPOST(pubId: string, options?: any): AxiosPromise<Booking> {\n            return BookingApiFp(configuration).declineUsingPOST(pubId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Booking list\n         * @param {ListRequest} listRequest listRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsingPOST(listRequest: ListRequest, options?: any): AxiosPromise<Array<Booking>> {\n            return BookingApiFp(configuration).listUsingPOST(listRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * BookingApi - object-oriented interface\n * @export\n * @class BookingApi\n * @extends {BaseAPI}\n */\nexport class BookingApi extends BaseAPI {\n    /**\n     * \n     * @summary Approve book an asset\n     * @param {string} pubId pubId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookingApi\n     */\n    public approveUsingPOST(pubId: string, options?: any) {\n        return BookingApiFp(this.configuration).approveUsingPOST(pubId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Book an asset\n     * @param {BookingRequest} bookingRequest bookingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookingApi\n     */\n    public bookUsingPOST(bookingRequest: BookingRequest, options?: any) {\n        return BookingApiFp(this.configuration).bookUsingPOST(bookingRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Decline book an asset\n     * @param {string} pubId pubId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookingApi\n     */\n    public declineUsingPOST(pubId: string, options?: any) {\n        return BookingApiFp(this.configuration).declineUsingPOST(pubId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Booking list\n     * @param {ListRequest} listRequest listRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookingApi\n     */\n    public listUsingPOST(listRequest: ListRequest, options?: any) {\n        return BookingApiFp(this.configuration).listUsingPOST(listRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import * as React from 'react';\nimport {hot} from 'react-hot-loader/root';\nimport {Route, Router, Switch} from 'react-router';\nimport {TodoContainer} from 'app/containers/TodoContainer';\nimport {AuthAPIApi} from \"../api\";\nimport * as Cookies from \"js-cookie\";\n\n// render react DOM\nexport const App = hot(({history}) => {\n    let accessToken = Cookies.get(\"func_ut\");\n\n    let api = new AuthAPIApi({\n        basePath: \"http://localhost:8080\",\n        accessToken: accessToken\n    })\n\n    api.getUsingGET1().then(() => {\n        console.log('@@@ index.tsx -> access token valid -> 16');\n    }).catch(() => {\n        console.log('@@@ index.tsx -> access token invalid -> 18');\n    })\n\n    return (\n        <Router history={history}>\n            <Switch>\n                <Route path=\"/\" component={TodoContainer}/>\n            </Switch>\n        </Router>\n    );\n});\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { createBrowserHistory } from 'history';\nimport { App } from 'app';\n\n// prepare history\nconst history = createBrowserHistory();\n\n// render react DOM\nReactDOM.render(<App history={history} />, document.getElementById('root'));\n"],"sourceRoot":""}